import  os
import  glob
import  random
import  numpy                  as      np
import  pylab                  as      pl
import  matplotlib.pyplot      as      plt
import  astropy.io.fits        as      fits
import  astropy.units          as      u
import  healpy                 as      hp

from    astropy.table          import  Table, join, hstack
from    astropy                import  constants as const
from    desitarget.geomask     import  circles
from    desiutil.bitmask       import  BitMask
from    desitarget.targetmask  import  load_mask_bits
from    astropy.coordinates    import  SkyCoord
from    astropy                import  units     as u
from    desimodel.footprint    import  pix2tiles, find_tiles_over_point, is_point_in_desi


##  https://faun.rc.fas.harvard.edu/eschlafly/desi/tiling/dr8/note.pdf
##  AIRMASS:        Airmass if observed 15. deg. from transit.
##  STAR_DENSITY:   Median # of GAIA stars with G < 19.5 per sq. deg. in tile. 
##  IMAGEFRAC R:    Fraction of this tile within 1.605 deg. of r imaging.     
##  IMAGEFRAC GRZ:  Fraction of this tile within 1.605 deg. of grz imaging. 
_file      = fits.open('/global/cscratch1/sd/mjwilson/BGS/SV-ASSIGN/tiles/BGS_SV_30_3x_superset60_Sep2019.fits')
tiles      = Table(_file[1].data)['AIRMASS', 'STAR_DENSITY', 'IMAGEFRAC_R', 'IMAGEFRAC_GRZ', 'TILEID', 'RA', 'DEC']

##
scratch    = os.environ['CSCRATCH']

gaia       = fits.open(scratch + '/BGS/SV-ASSIGN/masks/gaia_stellar_mask.fits')
gaia       = Table(gaia[1].data)

print(gaia)

##
nside      = 64

(indesi, tindex)          = is_point_in_desi(tiles, gaia['RA'].value, gaia['DEC'].value, return_tile_index=True)

##  Prevent 'duplication' of e.g. RA cols after join. 
del tiles['RA']
del tiles['DEC']

##  Some objects in the .mtl are not in the tiles;  rough cut on creation I guess. 
gaia['TILEID']          = -99 * np.ones_like(gaia['RA'].quantity.value, dtype=np.int)
gaia['TILEID'][indesi]  = tiles['TILEID'].quantity[tindex[indesi]]
gaia.sort('TILEID')

print(gaia)

exit(1)

##  Only keep the targets in a given tile. 
gaia     = gaia[gaia['TILEID'] > 0]
gaia     = join(gaia, tiles, keys=['TILEID'], join_type='left')

##  Unique TILEIDS.
utiles     = np.unique(gaia['TILEID'].quantity)

for _tile in utiles:
  fname    = scratch + '/BGS/SV-ASSIGN/masks/gaia_{:06d}.fits'.format(_tile)
  tile_cut = gaia[gaia['TILEID'] == _tile]

  print(tile_cut)
  
  tile_cut.write(fname, format='fits', overwrite=True)

print('\n\nDone.\n\n')
